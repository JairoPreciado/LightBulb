import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, Dimensions, ActivityIndicator, Alert } from 'react-native';
import { BarChart } from 'react-native-chart-kit';

const Consumo = () => {
  const [chartData, setChartData] = useState<number[]>([]); // Datos del gráfico
  const [loading, setLoading] = useState(true); // Estado de carga

  useEffect(() => {
    // Simulación de una llamada a API o Firestore para obtener datos
    const fetchData = async () => {
      try {
        // Aquí podrías reemplazar con una llamada a Firestore o una API
        const fetchedData = [20, 45, 28, 80, 99, 43, 50]; // Ejemplo de datos
        // Validar que los datos sean un array numérico y no contengan valores no válidos
        if (Array.isArray(fetchedData) && fetchedData.every((value) => typeof value === 'number' && !isNaN(value))) {
          setChartData(fetchedData);
        } else {
          throw new Error('Los datos del gráfico deben ser un array de números válidos.');
        }
      } catch (error) {
        console.error('Error al cargar los datos del gráfico:', error);
        Alert.alert('Error', 'Hubo un problema al cargar los datos del gráfico.');
      } finally {
        setLoading(false); // Termina la carga
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007BFF" />
        <Text style={styles.loadingText}>Cargando datos...</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Consumo</Text>

      {/* Información general */}
      <View style={styles.infoContainer}>
        <Text style={styles.infoText}>Voltaje: 220V</Text>
        <Text style={styles.infoText}>Potencia: 60W</Text>
        <Text style={styles.infoText}>Tiempo encendido: 5 horas</Text>
        <Text style={styles.infoText}>Costo acumulado: $10.50</Text>
      </View>

      {/* Gráfico semanal */}
<Text style={styles.subtitle}>Historial de Consumo (Semanal)</Text>
<BarChart
  data={{
    labels: ['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom'], // Etiquetas del eje X
    datasets: [
      {
        data: chartData, // Datos dinámicos
      },
    ],
  }}
  width={Dimensions.get('window').width - 40} // Ancho del gráfico
  height={220} // Altura del gráfico
  yAxisLabel="kWh " // Etiqueta en el eje Y (personalizable)
  yAxisSuffix=" " // Sufijo para valores del eje Y (vacío si no necesitas)
  chartConfig={{
    backgroundColor: '#1cc910',
    backgroundGradientFrom: '#eff3ff',
    backgroundGradientTo: '#efefef',
    decimalPlaces: 2, // Cantidad de decimales en las etiquetas
    color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // Color de las etiquetas
    style: {
      borderRadius: 16,
    },
  }}
  style={{
    marginVertical: 10,
    borderRadius: 16,
  }}
/>

{/* Gráfico mensual */}
<Text style={styles.subtitle}>Historial de Consumo (Mensual)</Text>
<BarChart
  data={{
    labels: ['Semana 1', 'Semana 2', 'Semana 3', 'Semana 4'], // Etiquetas del eje X (4 semanas del mes)
    datasets: [
      {
        data: chartData.slice(0, 4).map((value) => value * 1.5), // Datos simulados de las 4 semanas
      },
    ],
  }}
  width={Dimensions.get('window').width - 40} // Ancho del gráfico
  height={220} // Altura del gráfico
  yAxisLabel="$ " // Etiqueta del eje Y (por ejemplo, costo en dólares o moneda local)
  yAxisSuffix=" MXN" // Sufijo opcional (unidad de moneda)
  chartConfig={{
    backgroundColor: '#1c91cc',
    backgroundGradientFrom: '#eff3ff',
    backgroundGradientTo: '#efefef',
    decimalPlaces: 2, // Decimales en los valores
    color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // Color del texto
    style: {
      borderRadius: 16,
    },
  }}
  style={{
    marginVertical: 10,
    borderRadius: 16,
  }}
/>

    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  infoContainer: {
    marginBottom: 20,
    padding: 15,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 3,
  },
  infoText: {
    fontSize: 16,
    marginBottom: 10,
    color: '#333',
  },
  subtitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#333',
  },
});

export default Consumo;
